package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"gqlgen-db-viewer/application/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// MydbRecords is the resolver for the mydb_records field.
func (r *queryResolver) MydbRecords(ctx context.Context, input model.ListRecordsInput) ([]model.MyDBTable, error) {
	// panic(fmt.Errorf("not implemented: MydbRecords - mydb_records"))
	result := make([]model.MyDBTable, 0)

	fctx := graphql.GetFieldContext(ctx)
	for _, selection := range fctx.Field.Selections {
		switch selection := selection.(type) {
		case *ast.Field:
			if selection.Name == "__typename" {
				continue
			}
		case *ast.InlineFragment:
			fmt.Printf("ast.InlineFragment, %s\n", selection.TypeCondition)
			if selection.TypeCondition == "Order" {
				orders, err := r.OrderUsecase.ListOrders(ctx, input)
				if err != nil {
					return nil, err
				}
				for _, order := range orders {
					result = append(result, model.MyDBTable(order))
				}
			}

		default:
			fmt.Printf("%v, %t", selection, selection)
		}

	}

	return result, nil
}
