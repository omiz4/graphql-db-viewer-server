// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type MyDBTable interface {
	IsMyDBTable()
	GetIid() int
	GetSid() string
	GetUUID() uuid.UUID
	GetCreatedAt() time.Time
}

type Node interface {
	IsNode()
	GetID() string
}

type ListRecordsInput struct {
	UUID  uuid.UUID   `json:"uuid"`
	Table []TableType `json:"table"`
}

type Order struct {
	ID        string     `json:"id"`
	Iid       int        `json:"iid"`
	Sid       string     `json:"sid"`
	UUID      uuid.UUID  `json:"uuid"`
	CreatedAt time.Time  `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

func (Order) IsNode()            {}
func (this Order) GetID() string { return this.ID }

func (Order) IsMyDBTable()                 {}
func (this Order) GetIid() int             { return this.Iid }
func (this Order) GetSid() string          { return this.Sid }
func (this Order) GetUUID() uuid.UUID      { return this.UUID }
func (this Order) GetCreatedAt() time.Time { return this.CreatedAt }

type Query struct {
}

type TableType string

const (
	TableTypeOrder TableType = "Order"
)

var AllTableType = []TableType{
	TableTypeOrder,
}

func (e TableType) IsValid() bool {
	switch e {
	case TableTypeOrder:
		return true
	}
	return false
}

func (e TableType) String() string {
	return string(e)
}

func (e *TableType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TableType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TableType", str)
	}
	return nil
}

func (e TableType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
